stages:
  - build_and_test
  - release

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: "Hero's crucible"
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: "2020.3.22f1"
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: "0.15" # https://github.com/game-ci/docker/releases
  UNITY_DIR: $CI_PROJECT_DIR # this needs to be an absolute path. Defaults to the root of your tree.


image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
    - *license

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  tags:
    - local
  stage: build_and_test
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    reports:
      dotenv: var.env
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:   
    - local

build-StandaloneWindows64:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneWindows64
  after_script:
    - echo "WIN_ID=${CI_JOB_ID} " >> var.env 
    - apt-get update
    - echo "Installing zip";
    - apt-get install zip -y;
    - echo "Zipping the build";
    - zip -r ./${BUILD_TARGET}.zip ${UNITY_DIR}/Builds/${BUILD_TARGET}/;
    - echo "uploading the build";
    - apt-get install curl -y && apt-get install jq -y;
    - SHORT=$(curl -F "file=@${BUILD_TARGET}.zip" https://api.anonfiles.com/upload | jq '.data.file.url.short' | sed 's/"//g');  
    - echo "WIN_URL=${SHORT}/ " >> var.env;

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64
  after_script:
    - echo "LIN_ID=${CI_JOB_ID} " >> var.env
    - apt-get update
    - echo "Installing zip";
    - apt-get install zip -y;
    - echo "Zipping the build";
    - zip -r ./${BUILD_TARGET}.zip ${UNITY_DIR}/Builds/${BUILD_TARGET}/;
    - echo "uploading the build";
    - apt-get install curl -y && apt-get install jq -y;
    - SHORT=$(curl -F "file=@${BUILD_TARGET}.zip" https://api.anonfiles.com/upload | jq '.data.file.url.short' | sed 's/"//g');  
    - echo "LIN_URL=${SHORT}/ " >> var.env;

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build-StandaloneWindows64
    - job: build-StandaloneLinux64
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - local
  script:
    - echo 'Creating Release Page'
    - echo "Linux build job ${LIN_ID} result ${LIN_URL}"
    - echo "Windows build job ${WIN_ID} result ${WIN_URL}"
  allow_failure: true
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: '$CI_COMMIT_MESSAGE'  # $EXTRA_DESCRIPTION must be defined
    tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.
    ref: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Linux Build'
          url: '${LIN_URL}'
        - name: 'Windows Build'
          url: '${WIN_URL}'

workflow:
  rules:
    - if: $CI_COMMIT_TAG
